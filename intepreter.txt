A second way of starting the interpreter is python -c command [arg] ..., which executes the statement(s) in command, analogous to the shell’s -c option.

Some Python modules are also useful as scripts. These can be invoked using python -m module [arg] ..., which executes the source file for module as if you had spelled out its full name on the command line.

For basic interactive module try
  >>> the_world_is_flat = True
  >>> if the_world_is_flat:
  ...     print("Be careful not to fall off!")
  ...
  Be careful not to fall off!


By default, Python source files are treated as encoded in UTF-8. In that encoding, characters of most languages in the world can be used simultaneously in string literals, identifiers and comments — although the standard library only uses ASCII characters for identifiers, a convention that any portable code should follow. To display all these characters properly, your editor must recognize that the file is UTF-8, and it must use a font that supports all the characters in the file.
To declare an encoding other than the default one, a special comment line should be added as the first line of the file. The syntax is as follows:
  # -*- coding: encoding -*-
  # -*- coding: cp-1252 -*-

Comments in Python start with the hash character, #, and extend to the end of the physical line.

The interpreter acts as a simple calculator: you can type an expression at it and it will write the value. Expression syntax is straightforward: the operators +, -, * and / work just like in most other languages

Division (/) always returns a float. To do floor division and get an integer result (discarding any fractional result) you can use the // operator; to calculate the remainder you can use %:

With Python, it is possible to use the ** operator to calculate powers

The equal sign (=) is used to assign a value to a variable. Afterwards, no result is displayed before the next interactive prompt:

In interactive mode, the last printed expression is assigned to the variable _. This means that when you are using Python as a desk calculator, it is somewhat easier to continue calculations, for example:
  >>> tax = 12.5 / 100
  >>> price = 100.50
  >>> price * tax
  12.5625
  >>> price + _
  113.0625
  >>> round(_, 2)
  113.06

Python also has built-in support for complex numbers, and uses the j or J suffix to indicate the imaginary part (e.g. 3+5j).

String
  >>> 'spam eggs'  # single quotes
  'spam eggs'
  >>> 'doesn\'t'  # use \' to escape the single quote...
  "doesn't"
  >>> "doesn't"  # ...or use double quotes instead
  "doesn't"
  >>> '"Yes," he said.'
  '"Yes," he said.'
  >>> "\"Yes,\" he said."
  '"Yes," he said.'
  >>> '"Isn\'t," she said.'
  '"Isn\'t," she said.'

If you don’t want characters prefaced by \ to be interpreted as special characters, you can use raw strings by adding an r before the first quote:
  >>> print('C:\some\name')  # here \n means newline!
  C:\some
  ame
  >>> print(r'C:\some\name')  # note the r before the quote
  C:\some\name

String literals can span multiple lines. One way is using triple-quotes: """...""" or '''...'''. End of lines are automatically included in the string, but it’s possible to prevent this by adding a \ at the end of the line. The following example:

  print("""\
  Usage: thingy [OPTIONS]
    -h                        Display this usage message
    -H hostname               Hostname to connect to
  """)
produces the following output (note that the initial newline is not included):
  Usage: thingy [OPTIONS]
   -h                        Display this usage message
   -H hostname               Hostname to connect to

Strings can be concatenated (glued together) with the + operator, and repeated with *:

  >>> # 3 times 'un', followed by 'ium'
  >>> 3 * 'un' + 'ium'
  'unununium'
Two or more string literals (i.e. the ones enclosed between quotes) next to each other are automatically concatenated.
  >>>
  >>> 'Py' 'thon'
  'Python'

Strings can be indexed (subscripted), with the first character having index 0. There is no separate character type; a character is simply a string of size one:
  >>> word = 'Python'
  >>> word[0]  # character in position 0
  'P'
  >>> word[5]  # character in position 5
  'n'

Indices may also be negative numbers, to start counting from the right:
  >>>
  >>> word[-1]  # last character
  'n'
  >>> word[-2]  # second-last character
  'o'
  >>> word[-6]
  'P'
In addition to indexing, slicing is also supported. While indexing is used to obtain individual characters, slicing allows you to obtain substring:
  >>> word[0:2]  # characters from position 0 (included) to 2 (excluded)
  'Py'
  >>> word[2:5]  # characters from position 2 (included) to 5 (excluded)
  'tho'

Slice indices have useful defaults; an omitted first index defaults to zero, an omitted second index defaults to the size of the string being slice
  >>> word[:2]   # character from the beginning to position 2 (excluded)
  'Py'
  >>> word[4:]   # characters from position 4 (included) to the end
  'on'
  >>> word[-2:]  # characters from the second-last (included) to the end
  'on'

The built-in function len() returns the length of a string:
  >>> s = 'supercalifragilisticexpialidocious'
  >>> len(s)
  34
